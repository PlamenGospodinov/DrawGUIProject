using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;


namespace Draw
{
	/// <summary>
	/// Върху главната форма е поставен потребителски контрол,
	/// в който се осъществява визуализацията
	/// </summary>
	public partial class MainForm : Form
	{
		/// <summary>
		/// Агрегирания диалогов процесор във формата улеснява манипулацията на модела.
		/// </summary>
		private DialogProcessor dialogProcessor = new DialogProcessor();
		
		public MainForm()
		{
			//
			// The InitializeComponent() call is required for Windows Forms designer support.
			//
			InitializeComponent();
			
			//
			// TODO: Add constructor code after the InitializeComponent() call.
			//
		}

		/// <summary>
		/// Изход от програмата. Затваря главната форма, а с това и програмата.
		/// </summary>
		void ExitToolStripMenuItemClick(object sender, EventArgs e)
		{
			Close();
		}
		
		/// <summary>
		/// Събитието, което се прихваща, за да се превизуализира при изменение на модела.
		/// </summary>
		void ViewPortPaint(object sender, PaintEventArgs e)
		{
			dialogProcessor.ReDraw(sender, e);
		}
		
		/// <summary>
		/// Бутон, който поставя на произволно място правоъгълник със зададените размери.
		/// Променя се лентата със състоянието и се инвалидира контрола, в който визуализираме.
		/// </summary>
		void DrawRectangleSpeedButtonClick(object sender, EventArgs e)
		{
			dialogProcessor.AddRandomRectangle();
			
			statusBar.Items[0].Text = "Последно действие: Рисуване на правоъгълник";
			
			viewPort.Invalidate();
		}

		/// <summary>
		/// Прихващане на координатите при натискането на бутон на мишката и проверка (в обратен ред) дали не е
		/// щракнато върху елемент. Ако е така то той се отбелязва като селектиран и започва процес на "влачене".
		/// Промяна на статуса и инвалидиране на контрола, в който визуализираме.
		/// Реализацията се диалогът с потребителя, при който се избира "най-горния" елемент от екрана.
		/// </summary>
		void ViewPortMouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			if (pickUpSpeedButton.Checked) {
				Shape selec = dialogProcessor.ContainsPoint(e.Location);
				if(selec != null)
                {
                    if (dialogProcessor.Selection.Contains(selec))
                    {
						selec.FillColor = Color.White;
						dialogProcessor.Selection.Remove(selec);
					
                    }
                    else
                    {
						dialogProcessor.Selection.Add(selec);
                    }
                }
				
				statusBar.Items[0].Text = "Последно действие: Селекция на примитив";
				dialogProcessor.IsDragging = true;
				dialogProcessor.LastLocation = e.Location;
				viewPort.Invalidate();
				
			}
		}

		/// <summary>
		/// Прихващане на преместването на мишката.
		/// Ако сме в режм на "влачене", то избрания елемент се транслира.
		/// </summary>
		void ViewPortMouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			if (dialogProcessor.IsDragging) {
				if (dialogProcessor.Selection != null) statusBar.Items[0].Text = "Последно действие: Влачене";
				dialogProcessor.TranslateTo(e.Location);
				viewPort.Invalidate();
			}
		}

		/// <summary>
		/// Прихващане на отпускането на бутона на мишката.
		/// Излизаме от режим "влачене".
		/// </summary>
		void ViewPortMouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
		{
			dialogProcessor.IsDragging = false;
		}

        private void speedMenu_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void drawEllipseSpeedButton_Click(object sender, EventArgs e)
        {
			dialogProcessor.AddRandomEllipse();

			statusBar.Items[0].Text = "Последно действие: Рисуване на елипса";

			viewPort.Invalidate();
		}

        private void DrawPointSpeedButton_Click(object sender, EventArgs e)
        {
			dialogProcessor.AddRandomPoint();

			statusBar.Items[0].Text = "Последно действие: Рисуване на точка";

			viewPort.Invalidate();
		}

        private void drawLineSpeedButton_Click(object sender, EventArgs e)
        {

			dialogProcessor.AddRandomLine();

			statusBar.Items[0].Text = "Последно действие: Рисуване на отсечка";

			viewPort.Invalidate();
		}

        private void drawPolygonSpeedButton_Click(object sender, EventArgs e)
        {
			dialogProcessor.AddRandomPolygon();

			statusBar.Items[0].Text = "Последно действие: Рисуване на петоъгълник";

			viewPort.Invalidate();
		}

        private void drawCircleSpeedButton_Click(object sender, EventArgs e)
        {
			dialogProcessor.AddRandomCircle();

			statusBar.Items[0].Text = "Последно действие: Рисуване на кръг";

			viewPort.Invalidate();
		}

        private void colorSelectPickBtn_Click(object sender, EventArgs e)
        {
			if(colorSelectDialog.ShowDialog() == DialogResult.OK)
            {
				
                foreach(Shape item in dialogProcessor.Selection)
                {
					item.StrokeColor = colorSelectDialog.Color;
					viewPort.Invalidate();
				}
				dialogProcessor.currentStrokeColor = colorSelectDialog.Color;
				statusBar.Items[0].Text = "Последно действие: Смяна на цвета на контура.";

			}
        }

        private void saveFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
			if (saveFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.OK)
			{
				dialogProcessor.SerializeFile(dialogProcessor.ShapeList, saveFileDialog1.FileName);
			}
			statusBar.Items[0].Text = "Последно действие: Записване на файл.";
		}

        private void loadFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
			if (openFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.OK)
			{
				dialogProcessor.ShapeList = (List<Shape>)dialogProcessor.MyDeSerialize(openFileDialog1.FileName);
				viewPort.Invalidate();
			}
			statusBar.Items[0].Text = "Последно действие: Отваряне на файл.";
		}

		//toolStripButton1_Click
		private void toolStripButton1_Click(object sender, EventArgs e)
        {
			if (fillColorSelectDialog.ShowDialog() == DialogResult.OK)
			{

				foreach (Shape item in dialogProcessor.Selection)
				{
					item.FillColor = fillColorSelectDialog.Color;
					viewPort.Invalidate();
				}
				dialogProcessor.currentFillColor = fillColorSelectDialog.Color;
				statusBar.Items[0].Text = "Последно действие: Смяна на цвета на запълване.";
				
			}
		}

		
        private void OpacityPicker_Click(object sender, EventArgs e)
        {

        }

        private void OpacityPicker_SelectedIndexChanged(object sender, EventArgs e)
        {
			string opacityValue = OpacityPicker.Text;
			if (opacityValue != null)
			{
				if(opacityValue == "Transparent")
					dialogProcessor.currentOpac = 0;
				else if (opacityValue == "Not transparent")
					dialogProcessor.currentOpac = 1;
				statusBar.Items[0].Text = "Последно действие: Задаване на прозрачност";
				viewPort.Invalidate();
			}
		}

        private void selectedShapesColor_Click(object sender, EventArgs e)
        {
			if (selectedShapesColorDialog.ShowDialog() == DialogResult.OK)
			{

				foreach (Shape item in dialogProcessor.Selection)
				{
					item.FillColor = selectedShapesColorDialog.Color;
					viewPort.Invalidate();
				}
				dialogProcessor.currentSelectedColor = selectedShapesColorDialog.Color;
				statusBar.Items[0].Text = "Последно действие: Смяна на цвета на запълване при селекция.";

			}
		}

        private void changeBorderWidth_Click(object sender, EventArgs e)
        {
			/*Dialog eventForm = new Dialog("border width", dialogProcessor, "right");
			eventForm.ShowDialog();
			statusBar.Items[0].Text = "Последно действие: Задаване дебелина на кънтура";
			viewPort.Invalidate();*/
			
		}
    }
}
